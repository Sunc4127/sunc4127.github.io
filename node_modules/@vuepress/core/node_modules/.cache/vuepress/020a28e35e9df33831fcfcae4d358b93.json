{"remainingRequest":"/Users/chengsun/Desktop/sunc4127.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/chengsun/Desktop/sunc4127.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/chengsun/Desktop/sunc4127.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/chengsun/Desktop/sunc4127.github.io/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/chengsun/Desktop/sunc4127.github.io/docs/03.技术/01.技术文档/02.Markdown使用教程.md?vue&type=template&id=60a8038e&","dependencies":[{"path":"/Users/chengsun/Desktop/sunc4127.github.io/docs/03.技术/01.技术文档/02.Markdown使用教程.md","mtime":1635590043000},{"path":"/Users/chengsun/Desktop/sunc4127.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1636678368190},{"path":"/Users/chengsun/Desktop/sunc4127.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1636678368990},{"path":"/Users/chengsun/Desktop/sunc4127.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1636678368190},{"path":"/Users/chengsun/Desktop/sunc4127.github.io/node_modules/vue-loader/lib/index.js","mtime":1636678368629},{"path":"/Users/chengsun/Desktop/sunc4127.github.io/node_modules/@vuepress/markdown-loader/index.js","mtime":1636678367456}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function () {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("h1", { attrs: { id: "markdown使用教程" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#markdown使用教程" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Markdown使用教程"),
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "一、markdown" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#一、markdown" } },
          [_vm._v("#")]
        ),
        _vm._v(" 一、Markdown"),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "简介" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#简介" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" 简介"),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("img", {
          attrs: {
            src: "https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png",
            alt: "logo",
          },
        }),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("Markdown")]),
        _vm._v(
          " 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。"
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "应用" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#应用" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" 应用"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("当前许多网站都广泛使用 "),
        _c("code", [_vm._v("Markdown")]),
        _vm._v(
          " 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、知乎等"
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "编辑器" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#编辑器" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" 编辑器"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("推荐使用"),
        _c("code", [_vm._v("Typora")]),
        _vm._v("，官网："),
        _c(
          "a",
          {
            attrs: {
              href: "https://typora.io/",
              target: "_blank",
              rel: "noopener noreferrer",
            },
          },
          [_vm._v("https://typora.io/"), _c("OutboundLink")],
          1
        ),
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "二、徽章" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#二、徽章" } },
          [_vm._v("#")]
        ),
        _vm._v(" 二、徽章"),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "什么是徽章" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#什么是徽章" } },
          [_vm._v("#")]
        ),
        _vm._v(" 什么是徽章"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "徽章是一种小巧精美的小图标，一般配有相关文字进行辅助说明，可对数据进行监控，链接跳转等，富有表现力。"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("常见于"),
        _c("code", [_vm._v("github")]),
        _vm._v("项目主页，但其不仅出现于 "),
        _c("code", [_vm._v("github")]),
        _vm._v(" 项目主页，凡是能够表现图片的地方都可以出现徽章。"),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "徽章的使用" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#徽章的使用" } },
          [_vm._v("#")]
        ),
        _vm._v(" 徽章的使用"),
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("在"),
          _c("code", [_vm._v("markdown")]),
          _vm._v("中使用"),
        ]),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _vm._v("格式:\n"),
            _c("span", { pre: true, attrs: { class: "token url" } }, [
              _vm._v("["),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("![图片文字说明"),
              ]),
              _vm._v("]("),
              _c("span", { pre: true, attrs: { class: "token url" } }, [
                _vm._v("图片源地址"),
              ]),
              _vm._v(")"),
            ]),
            _vm._v("](超链接地址)  # 即超链接内部嵌套图片\n\n语法：\n"),
            _c("span", { pre: true, attrs: { class: "token url" } }, [
              _vm._v("["),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("![github"),
              ]),
              _vm._v("]("),
              _c("span", { pre: true, attrs: { class: "token url" } }, [
                _vm._v(
                  "https://img.shields.io/badge/github-xugaoyi-brightgreen.svg"
                ),
              ]),
              _vm._v(")"),
            ]),
            _vm._v("](https://github.com/xugaoyi)\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
        ]),
      ]),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/xugaoyi",
              target: "_blank",
              rel: "noopener noreferrer",
            },
          },
          [
            _c("img", {
              attrs: {
                src: "https://img.shields.io/badge/github-xugaoyi-brightgreen.svg",
                alt: "github",
              },
            }),
            _c("OutboundLink"),
          ],
          1
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("徽章生成网站："),
        _c(
          "a",
          {
            attrs: {
              href: "https://shields.io/",
              target: "_blank",
              rel: "noopener noreferrer",
            },
          },
          [_vm._v("https://shields.io/"), _c("OutboundLink")],
          1
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("本文档主要介绍markdown，不对徽章做过多介绍，详细介绍请 "),
        _c(
          "a",
          {
            attrs: {
              href: "https://segmentfault.com/a/1190000019552597",
              target: "_blank",
              rel: "noopener noreferrer",
            },
          },
          [_vm._v(" 戳我 "), _c("OutboundLink")],
          1
        ),
        _vm._v(" 了解。"),
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "三、设置目录" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#三、设置目录" } },
          [_vm._v("#")]
        ),
        _vm._v(" 三、设置目录"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("设置之后会根据分级标题来自动生成目录。")]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [_vm._v("[TOC]\n")]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
        ]),
      ]),
      _c("blockquote", [_c("p", [_vm._v("注：github暂未支持。")])]),
      _vm._v(" "),
      _c("p", [_vm._v("[TOC]")]),
      _vm._v(" "),
      _c("p", [
        _vm._v("在github生成TOC的方法："),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/ekalinin/github-markdown-toc",
              target: "_blank",
              rel: "noopener noreferrer",
            },
          },
          [
            _vm._v("https://github.com/ekalinin/github-markdown-toc"),
            _c("OutboundLink"),
          ],
          1
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "windows系统需要基于golang实现的工具：https://github.com/ekalinin/github-markdown-toc.go"
        ),
      ]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _vm._v(
            "如果你有GO语言的编译环境，可以尝试自己编译，如果没有，可以直接下载编译好的二进制文件。"
          ),
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "如windows系统64位 下载：gh-md-toc.windows.amd64.tgz （386 是32位，amd64是64位）"
          ),
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "下载解压后，发现没有后缀名无法识别，实际上这是个exe文件，所以只需要暴力地在后面加上.exe就可以开始愉快使用了。"
          ),
        ]),
        _vm._v(" "),
        _c("p", [_vm._v("使用方法：")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [_vm._v("首先将.md文档复制到gh-md-toc.exe的根目录下")]),
          _vm._v(" "),
          _c("li", [
            _vm._v(
              "在该目录下打开系统命令行，输入命令：gh-md-toc.exe README.MD 生成目录"
            ),
          ]),
          _vm._v(" "),
          _c("li", [_vm._v("把生成的目录复制到.md文件即可。")]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("这是gh-md-toc生成的目录：")])]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("a", { attrs: { href: "#%E4%B8%80markdown" } }, [
            _vm._v("一、Markdown"),
          ]),
          _vm._v(" "),
          _c("ul", [
            _c("li", [
              _c("a", { attrs: { href: "#%E7%AE%80%E4%BB%8B" } }, [
                _vm._v("简介"),
              ]),
            ]),
            _vm._v(" "),
            _c("li", [
              _c("a", { attrs: { href: "#%E5%BA%94%E7%94%A8" } }, [
                _vm._v("应用"),
              ]),
            ]),
            _vm._v(" "),
            _c("li", [
              _c("a", { attrs: { href: "#%E7%BC%96%E8%BE%91%E5%99%A8" } }, [
                _vm._v("编辑器"),
              ]),
            ]),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "#%E4%BA%8C%E5%BE%BD%E7%AB%A0" } }, [
            _vm._v("二、徽章"),
          ]),
          _vm._v(" "),
          _c("ul", [
            _c("li", [
              _c(
                "a",
                {
                  attrs: {
                    href: "#%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%BD%E7%AB%A0",
                  },
                },
                [_vm._v("什么是徽章")]
              ),
            ]),
            _vm._v(" "),
            _c("li", [
              _c(
                "a",
                {
                  attrs: {
                    href: "#%E5%BE%BD%E7%AB%A0%E7%9A%84%E4%BD%BF%E7%94%A8",
                  },
                },
                [_vm._v("徽章的使用")]
              ),
            ]),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            {
              attrs: { href: "#%E4%B8%89%E8%AE%BE%E7%BD%AE%E7%9B%AE%E5%BD%95" },
            },
            [_vm._v("三、设置目录")]
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("a", { attrs: { href: "#%E5%9B%9B%E6%A0%87%E9%A2%98" } }, [
            _vm._v("四、标题"),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c(
            "a",
            { attrs: { href: "#%E4%B8%80%E7%BA%A7%E6%A0%87%E9%A2%98" } },
            [_vm._v("一级标题")]
          ),
          _vm._v(" "),
          _c("ul", [
            _c("li", [
              _c(
                "a",
                { attrs: { href: "#%E4%BA%8C%E7%BA%A7%E6%A0%87%E9%A2%98" } },
                [_vm._v("二级标题")]
              ),
              _vm._v(" "),
              _c("ul", [
                _c("li", [
                  _c(
                    "a",
                    {
                      attrs: { href: "#%E4%B8%89%E7%BA%A7%E6%A0%87%E9%A2%98" },
                    },
                    [_vm._v("三级标题")]
                  ),
                  _vm._v(" "),
                  _c("ul", [
                    _c("li", [
                      _c(
                        "a",
                        {
                          attrs: {
                            href: "#%E5%9B%9B%E7%BA%A7%E6%A0%87%E9%A2%98",
                          },
                        },
                        [_vm._v("四级标题")]
                      ),
                      _vm._v(" "),
                      _c("ul", [
                        _c("li", [
                          _c(
                            "a",
                            {
                              attrs: {
                                href: "#%E4%BA%94%E7%BA%A7%E6%A0%87%E9%A2%98",
                              },
                            },
                            [_vm._v("五级标题")]
                          ),
                          _vm._v(" "),
                          _c("ul", [
                            _c("li", [
                              _c(
                                "a",
                                {
                                  attrs: {
                                    href: "#%E5%85%AD%E7%BA%A7%E6%A0%87%E9%A2%98",
                                  },
                                },
                                [_vm._v("六级标题")]
                              ),
                            ]),
                          ]),
                        ]),
                      ]),
                    ]),
                  ]),
                ]),
              ]),
            ]),
            _vm._v(" "),
            _c("li", [
              _c("a", { attrs: { href: "#%E4%BA%94%E6%96%87%E6%9C%AC" } }, [
                _vm._v("五、文本"),
              ]),
              _vm._v(" "),
              _c("ul", [
                _c("li", [
                  _c("a", { attrs: { href: "#%E6%AE%B5%E8%90%BD" } }, [
                    _vm._v("段落"),
                  ]),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c("a", { attrs: { href: "#%E5%AD%97%E4%BD%93" } }, [
                    _vm._v("字体"),
                  ]),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c("a", { attrs: { href: "#%E5%88%A0%E9%99%A4%E7%BA%BF" } }, [
                    _vm._v("删除线"),
                  ]),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c("a", { attrs: { href: "#%E4%B8%8B%E5%88%92%E7%BA%BF" } }, [
                    _vm._v("下划线"),
                  ]),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c(
                    "a",
                    {
                      attrs: { href: "#%E6%96%87%E5%AD%97%E9%AB%98%E4%BA%AE" },
                    },
                    [_vm._v("文字高亮")]
                  ),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c("a", { attrs: { href: "#%E5%88%86%E9%9A%94%E7%BA%BF" } }, [
                    _vm._v("分隔线"),
                  ]),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c("a", { attrs: { href: "#%E8%84%9A%E6%B3%A8" } }, [
                    _vm._v("脚注"),
                  ]),
                ]),
              ]),
            ]),
            _vm._v(" "),
            _c("li", [
              _c("a", { attrs: { href: "#%E5%85%AD%E5%88%97%E8%A1%A8" } }, [
                _vm._v("六、列表"),
              ]),
              _vm._v(" "),
              _c("ul", [
                _c("li", [
                  _c(
                    "a",
                    {
                      attrs: { href: "#%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8" },
                    },
                    [_vm._v("无序列表")]
                  ),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c(
                    "a",
                    {
                      attrs: { href: "#%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8" },
                    },
                    [_vm._v("有序列表")]
                  ),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c(
                    "a",
                    {
                      attrs: { href: "#%E6%8A%98%E5%8F%A0%E5%88%97%E8%A1%A8" },
                    },
                    [_vm._v("折叠列表")]
                  ),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c(
                    "a",
                    {
                      attrs: {
                        href: "#%E5%B8%A6%E5%A4%8D%E9%80%89%E6%A1%86%E5%88%97%E8%A1%A8",
                      },
                    },
                    [_vm._v("带复选框列表")]
                  ),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c(
                    "a",
                    {
                      attrs: { href: "#%E5%88%97%E8%A1%A8%E5%B5%8C%E5%A5%97" },
                    },
                    [_vm._v("列表嵌套")]
                  ),
                ]),
              ]),
            ]),
            _vm._v(" "),
            _c("li", [
              _c(
                "a",
                {
                  attrs: {
                    href: "#%E4%B8%83%E5%8C%BA%E5%9D%97%E5%BC%95%E7%94%A8",
                  },
                },
                [_vm._v("七、区块引用")]
              ),
              _vm._v(" "),
              _c("ul", [
                _c("li", [
                  _c(
                    "a",
                    {
                      attrs: { href: "#%E5%8C%BA%E5%9D%97%E5%B5%8C%E5%A5%97" },
                    },
                    [_vm._v("区块嵌套")]
                  ),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c(
                    "a",
                    {
                      attrs: {
                        href: "#%E5%8C%BA%E5%9D%97%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%88%97%E8%A1%A8",
                      },
                    },
                    [_vm._v("区块中使用列表")]
                  ),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c(
                    "a",
                    {
                      attrs: {
                        href: "#%E5%88%97%E8%A1%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%8C%BA%E5%9D%97",
                      },
                    },
                    [_vm._v("列表中使用区块")]
                  ),
                ]),
              ]),
            ]),
            _vm._v(" "),
            _c("li", [
              _c("a", { attrs: { href: "#%E5%85%AB%E4%BB%A3%E7%A0%81" } }, [
                _vm._v("八、代码"),
              ]),
              _vm._v(" "),
              _c("ul", [
                _c("li", [
                  _c(
                    "a",
                    {
                      attrs: { href: "#%E4%BB%A3%E7%A0%81%E5%8C%BA%E5%9D%97" },
                    },
                    [_vm._v("代码区块")]
                  ),
                ]),
              ]),
            ]),
            _vm._v(" "),
            _c("li", [
              _c("a", { attrs: { href: "#%E4%B9%9D%E9%93%BE%E6%8E%A5" } }, [
                _vm._v("九、链接"),
              ]),
              _vm._v(" "),
              _c("ul", [
                _c("li", [
                  _c(
                    "a",
                    {
                      attrs: { href: "#%E5%8F%98%E9%87%8F%E9%93%BE%E6%8E%A5" },
                    },
                    [_vm._v("变量链接")]
                  ),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c(
                    "a",
                    {
                      attrs: {
                        href: "#github%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%86%85%E9%83%A8%E9%93%BE%E6%8E%A5",
                      },
                    },
                    [_vm._v("Github中使用内部链接")]
                  ),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c(
                    "a",
                    {
                      attrs: { href: "#%E9%94%9A%E7%82%B9%E9%93%BE%E6%8E%A5" },
                    },
                    [_vm._v("锚点链接")]
                  ),
                ]),
              ]),
            ]),
            _vm._v(" "),
            _c("li", [
              _c("a", { attrs: { href: "#%E5%8D%81%E5%9B%BE%E7%89%87" } }, [
                _vm._v("十、图片"),
              ]),
              _vm._v(" "),
              _c("ul", [
                _c("li", [
                  _c(
                    "a",
                    {
                      attrs: { href: "#%E5%9B%BE%E7%89%87%E5%AE%BD%E9%AB%98" },
                    },
                    [_vm._v("图片宽高")]
                  ),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c(
                    "a",
                    {
                      attrs: {
                        href: "#%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E4%BB%A5%E5%8F%8Agithub%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%9B%BE%E7%89%87",
                      },
                    },
                    [_vm._v("相对路径以及Github中使用图片")]
                  ),
                ]),
              ]),
            ]),
            _vm._v(" "),
            _c("li", [
              _c(
                "a",
                { attrs: { href: "#%E5%8D%81%E4%B8%80%E8%A1%A8%E6%A0%BC" } },
                [_vm._v("十一、表格")]
              ),
            ]),
            _vm._v(" "),
            _c("li", [
              _c(
                "a",
                {
                  attrs: {
                    href: "#%E5%8D%81%E4%BA%8Cemoji%E8%A1%A8%E6%83%85%E5%8C%85",
                  },
                },
                [_vm._v("十二、Emoji表情包")]
              ),
            ]),
            _vm._v(" "),
            _c("li", [
              _c(
                "a",
                {
                  attrs: {
                    href: "#%E5%8D%81%E4%B8%89%E5%85%B6%E4%BB%96%E6%8A%80%E5%B7%A7",
                  },
                },
                [_vm._v("十三、其他技巧")]
              ),
              _vm._v(" "),
              _c("ul", [
                _c("li", [
                  _c(
                    "a",
                    {
                      attrs: {
                        href: "#%E6%94%AF%E6%8C%81%E7%9A%84-html-%E5%85%83%E7%B4%A0",
                      },
                    },
                    [_vm._v("支持的 HTML 元素")]
                  ),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c("a", { attrs: { href: "#%E8%BD%AC%E4%B9%89" } }, [
                    _vm._v("转义"),
                  ]),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c(
                    "a",
                    {
                      attrs: { href: "#%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F" },
                    },
                    [_vm._v("数学公式")]
                  ),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c("a", { attrs: { href: "#%E5%9B%BE%E8%A1%A8" } }, [
                    _vm._v("图表"),
                  ]),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c("a", { attrs: { href: "#%E6%B5%81%E7%A8%8B%E5%9B%BE" } }, [
                    _vm._v("流程图"),
                  ]),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c("a", { attrs: { href: "#%E6%97%B6%E5%BA%8F%E5%9B%BE" } }, [
                    _vm._v("时序图"),
                  ]),
                ]),
                _vm._v(" "),
                _c("li", [
                  _c("a", { attrs: { href: "#%E7%94%98%E7%89%B9%E5%9B%BE" } }, [
                    _vm._v("甘特图"),
                  ]),
                ]),
              ]),
            ]),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "四、标题" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#四、标题" } },
          [_vm._v("#")]
        ),
        _vm._v(" 四、标题"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c(
              "span",
              { pre: true, attrs: { class: "token title important" } },
              [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("#")]
                ),
                _vm._v(" 一级标题"),
              ]
            ),
            _vm._v("\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token title important" } },
              [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("##")]
                ),
                _vm._v(" 二级标题"),
              ]
            ),
            _vm._v("\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token title important" } },
              [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("###")]
                ),
                _vm._v(" 三级标题"),
              ]
            ),
            _vm._v("\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token title important" } },
              [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("####")]
                ),
                _vm._v(" 四级标题"),
              ]
            ),
            _vm._v("\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token title important" } },
              [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("#####")]
                ),
                _vm._v(" 五级标题"),
              ]
            ),
            _vm._v("\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token title important" } },
              [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("######")]
                ),
                _vm._v(" 六级标题"),
              ]
            ),
            _vm._v("\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
        ]),
      ]),
      _c("h1", { attrs: { id: "一级标题" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#一级标题" } },
          [_vm._v("#")]
        ),
        _vm._v(" 一级标题"),
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "二级标题" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#二级标题" } },
          [_vm._v("#")]
        ),
        _vm._v(" 二级标题"),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "三级标题" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#三级标题" } },
          [_vm._v("#")]
        ),
        _vm._v(" 三级标题"),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "四级标题" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#四级标题" } },
          [_vm._v("#")]
        ),
        _vm._v(" 四级标题"),
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "五级标题" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#五级标题" } },
          [_vm._v("#")]
        ),
        _vm._v(" 五级标题"),
      ]),
      _vm._v(" "),
      _c("h6", { attrs: { id: "六级标题" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#六级标题" } },
          [_vm._v("#")]
        ),
        _vm._v(" 六级标题"),
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "五、文本" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#五、文本" } },
          [_vm._v("#")]
        ),
        _vm._v(" 五、文本"),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "段落" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#段落" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" 段落"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Markdown 段落没有特殊的格式，直接编写文字，"),
        _c("strong", [_vm._v("需要段落缩进时使用2个Tab")]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "字体" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#字体" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" 字体"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token italic" } }, [
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v("*"),
              ]),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("斜体文本"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v("*"),
              ]),
            ]),
            _vm._v(" \n或 "),
            _c("span", { pre: true, attrs: { class: "token italic" } }, [
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v("_"),
              ]),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("斜体文本"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v("_"),
              ]),
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token bold" } }, [
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v("**"),
              ]),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("粗体文本"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v("**"),
              ]),
            ]),
            _vm._v("\n或  "),
            _c("span", { pre: true, attrs: { class: "token bold" } }, [
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v("__"),
              ]),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("粗体文本"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v("__"),
              ]),
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token bold" } }, [
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v("**"),
              ]),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _c("span", { pre: true, attrs: { class: "token italic" } }, [
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("*")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token content" } }, [
                    _vm._v("粗斜体文本"),
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("*")]
                  ),
                ]),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v("**"),
              ]),
            ]),
            _vm._v("\n或 "),
            _c("span", { pre: true, attrs: { class: "token bold" } }, [
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v("__"),
              ]),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _c("span", { pre: true, attrs: { class: "token italic" } }, [
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("_")]
                  ),
                  _c("span", { pre: true, attrs: { class: "token content" } }, [
                    _vm._v("粗斜体文本"),
                  ]),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("_")]
                  ),
                ]),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v("__"),
              ]),
            ]),
            _vm._v("\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
        ]),
      ]),
      _c("p", [_c("em", [_vm._v("斜体文本")])]),
      _vm._v(" "),
      _c("p", [_c("em", [_vm._v("斜体文本")])]),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("粗体文本")])]),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("粗体文本")])]),
      _vm._v(" "),
      _c("p", [_c("em", [_c("strong", [_vm._v("粗斜体文本")])])]),
      _vm._v(" "),
      _c("p", [_c("em", [_c("strong", [_vm._v("粗斜体文本")])])]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "删除线" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#删除线" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" 删除线"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 "
        ),
        _c("strong", [_vm._v("~~")]),
        _vm._v(" 即可，实例如下："),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token strike" } }, [
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v("~~"),
              ]),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("BAIDU.COM"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v("~~"),
              ]),
            ]),
            _vm._v("\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
        ]),
      ]),
      _c("p", [_c("s", [_vm._v("BAIDU.COM")])]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "下划线" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#下划线" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" 下划线"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("下划线可以通过 HTML 的"),
        _c("code", [_vm._v("<u>")]),
        _vm._v(" 标签来实现："),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("<")]
                ),
                _vm._v("u"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("带下划线的文本"),
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("</")]
                ),
                _vm._v("u"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
        ]),
      ]),
      _c("p", [_c("u", [_vm._v("带下划线的文本")])]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "文字高亮" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#文字高亮" } },
          [_vm._v("#")]
        ),
        _vm._v(" 文字高亮"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("文字高亮能使行内部分文字高亮，使用一对反引号。")]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c(
              "span",
              {
                pre: true,
                attrs: { class: "token code-snippet code keyword" },
              },
              [_vm._v("`html`")]
            ),
            _vm._v(" "),
            _c(
              "span",
              {
                pre: true,
                attrs: { class: "token code-snippet code keyword" },
              },
              [_vm._v("`css`")]
            ),
            _vm._v(" "),
            _c(
              "span",
              {
                pre: true,
                attrs: { class: "token code-snippet code keyword" },
              },
              [_vm._v("`javascript`")]
            ),
            _vm._v(" \n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
        ]),
      ]),
      _c("p", [
        _c("code", [_vm._v("html")]),
        _vm._v(" "),
        _c("code", [_vm._v("css")]),
        _vm._v(" "),
        _c("code", [_vm._v("javascript")]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "分隔线" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#分隔线" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" 分隔线"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线："
        ),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c(
              "span",
              { pre: true, attrs: { class: "token hr punctuation" } },
              [_vm._v("***")]
            ),
            _vm._v("\n\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token hr punctuation" } },
              [_vm._v("*****")]
            ),
            _vm._v("\n\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token hr punctuation" } },
              [_vm._v("- - -")]
            ),
            _vm._v("\n\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token hr punctuation" } },
              [_vm._v("----------")]
            ),
            _vm._v("\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("7")]),
          _c("br"),
        ]),
      ]),
      _c("hr"),
      _vm._v(" "),
      _c("h3", { attrs: { id: "脚注" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#脚注" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" 脚注"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("脚注是对文本的补充说明。")]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _vm._v("[^变量]\n在文档结尾或其他位置給变量赋值：\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token url-reference url" } },
              [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("[")]
                ),
                _c("span", { pre: true, attrs: { class: "token variable" } }, [
                  _vm._v("^变量"),
                ]),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("]")]
                ),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v(":")]
                ),
                _vm._v(" 注明框内显示的内容"),
              ]
            ),
            _vm._v("\n\n鼠标移到这里> [^哈喽]\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token url-reference url" } },
              [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("[")]
                ),
                _c("span", { pre: true, attrs: { class: "token variable" } }, [
                  _vm._v("^哈喽"),
                ]),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("]")]
                ),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v(":")]
                ),
                _vm._v(" 注明框内显示的内容"),
              ]
            ),
            _vm._v("\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
        ]),
      ]),
      _c("blockquote", [_c("p", [_vm._v("注：在部分线上预览未支持")])]),
      _vm._v(" "),
      _c("p", [
        _vm._v("鼠标移到这里> "),
        _c(
          "a",
          {
            attrs: {
              href: "%E6%B3%A8%E6%98%8E%E6%A1%86%E5%86%85%E6%98%BE%E7%A4%BA%E7%9A%84%E5%86%85%E5%AE%B9",
            },
          },
          [_vm._v("^哈喽")]
        ),
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "六、列表" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#六、列表" } },
          [_vm._v("#")]
        ),
        _vm._v(" 六、列表"),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "无序列表" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#无序列表" } },
          [_vm._v("#")]
        ),
        _vm._v(" 无序列表"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("使用星号"),
        _c("code", [_vm._v("*")]),
        _vm._v("、加号"),
        _c("code", [_vm._v("+")]),
        _vm._v("或是减号"),
        _c("code", [_vm._v("-")]),
        _vm._v("作为列表标记："),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("*")]
            ),
            _vm._v(" 第一项\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("*")]
            ),
            _vm._v(" 第二项\n\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("+")]
            ),
            _vm._v(" 第一项\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("+")]
            ),
            _vm._v(" 第二项\n\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("-")]
            ),
            _vm._v(" 第一项\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("-")]
            ),
            _vm._v(" 第二项\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("7")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("8")]),
          _c("br"),
        ]),
      ]),
      _c("ul", [
        _c("li", [_vm._v("第一项")]),
        _vm._v(" "),
        _c("li", [_vm._v("第二项")]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "有序列表" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#有序列表" } },
          [_vm._v("#")]
        ),
        _vm._v(" 有序列表"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("使用数字并加上"),
        _c("code", [_vm._v(".")]),
        _vm._v(" 号来表示"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("1.")]
            ),
            _vm._v(" 第一项\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("2.")]
            ),
            _vm._v(" 第二项\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
        ]),
      ]),
      _c("ol", [
        _c("li", [_vm._v("第一项")]),
        _vm._v(" "),
        _c("li", [_vm._v("第二项")]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "折叠列表" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#折叠列表" } },
          [_vm._v("#")]
        ),
        _vm._v(" 折叠列表"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("<")]
                ),
                _vm._v("details"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("<")]
                ),
                _vm._v("summary"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("点我打开关闭折叠"),
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("</")]
                ),
                _vm._v("summary"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("\n 折叠内容\n "),
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("<")]
                ),
                _vm._v("ul"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("\n     "),
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("<")]
                ),
                _vm._v("li"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("1"),
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("</")]
                ),
                _vm._v("li"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("\n     "),
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("<")]
                ),
                _vm._v("li"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("2"),
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("</")]
                ),
                _vm._v("li"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("\n     "),
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("<")]
                ),
                _vm._v("li"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("3"),
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("</")]
                ),
                _vm._v("li"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("\n "),
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("</")]
                ),
                _vm._v("ul"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("</")]
                ),
                _vm._v("details"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("7")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("8")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("9")]),
          _c("br"),
        ]),
      ]),
      _c("blockquote", [
        _c("p", [
          _vm._v(
            "注意：<details> 标签内写markdown代码无效，可写html代码，如ul>li、table等"
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("details", [
        _c("summary", [_vm._v("点我打开关闭折叠")]),
        _vm._v("\n 折叠内容\n "),
        _c("ul", [
          _c("li", [_vm._v("1")]),
          _vm._v(" "),
          _c("li", [_vm._v("2")]),
          _vm._v(" "),
          _c("li", [_vm._v("3")]),
        ]),
      ]),
      _vm._v(" "),
      _c("details", [
        _c("summary", [_vm._v("包含table的折叠")]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { attrs: { align: "center" } }, [_vm._v("分类")]),
              _vm._v(" "),
              _c("th", { attrs: { align: "center" } }, [_vm._v("例词")]),
            ]),
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { attrs: { align: "center" } }, [
                _vm._v("人称代词-主格"),
              ]),
              _vm._v(" "),
              _c("td", { attrs: { align: "center" } }, [
                _vm._v("I我，you你，he他，she她，they他们， we我们"),
              ]),
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { attrs: { align: "center" } }, [
                _vm._v("人称代词-宾格"),
              ]),
              _vm._v(" "),
              _c("td", { attrs: { align: "center" } }, [
                _vm._v("me我， you你， him他， her她， them他们， us我们"),
              ]),
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { attrs: { align: "center" } }, [_vm._v("物主代词")]),
              _vm._v(" "),
              _c("td", { attrs: { align: "center" } }, [
                _vm._v(
                  "my我的， his他的， your你的（your你们的）， their他们的， hers她的"
                ),
              ]),
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { attrs: { align: "center" } }, [_vm._v("指示代词")]),
              _vm._v(" "),
              _c("td", { attrs: { align: "center" } }, [
                _vm._v("this这， that那， these这些， those 那些"),
              ]),
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { attrs: { align: "center" } }, [_vm._v("反身代词")]),
              _vm._v(" "),
              _c("td", { attrs: { align: "center" } }, [
                _vm._v(
                  "myself我自己， himself他自己， themselves他们自己， yourself你(们)自己，herself她自己"
                ),
              ]),
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { attrs: { align: "center" } }, [_vm._v("疑问代词")]),
              _vm._v(" "),
              _c("td", { attrs: { align: "center" } }, [
                _vm._v("who谁， what什么， which哪个"),
              ]),
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { attrs: { align: "center" } }, [_vm._v("不定代词")]),
              _vm._v(" "),
              _c("td", { attrs: { align: "center" } }, [
                _vm._v("some一些， many许多， both两个、两个都， any许多"),
              ]),
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { attrs: { align: "center" } }, [_vm._v("关系代词")]),
              _vm._v(" "),
              _c("td", { attrs: { align: "center" } }, [
                _vm._v(
                  "which……的物， who……的人， that……的人或物， who谁， that引导定语从句"
                ),
              ]),
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { attrs: { align: "center" } }, [_vm._v("相互代词")]),
              _vm._v(" "),
              _c("td", { attrs: { align: "center" } }, [
                _vm._v("each other 互相， one another互相"),
              ]),
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { attrs: { align: "center" } }, [_vm._v("连接代词")]),
              _vm._v(" "),
              _c("td", { attrs: { align: "center" } }, [
                _vm._v(
                  "who,whom,whose,what,which,whatever,whichever,whoever,whomever"
                ),
              ]),
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { attrs: { align: "center" } }, [_vm._v("替代词")]),
              _vm._v(" "),
              _c("td", { attrs: { align: "center" } }, [
                _vm._v("one（单数），ones（复数）"),
              ]),
            ]),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "带复选框列表" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#带复选框列表" } },
          [_vm._v("#")]
        ),
        _vm._v(" 带复选框列表"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("*")]
            ),
            _vm._v(" [x] 第一项\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("*")]
            ),
            _vm._v(" [ ] 第二项\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("*")]
            ),
            _vm._v(" [ ] 第三项\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
        ]),
      ]),
      _c("blockquote", [_c("p", [_vm._v("注：在部分线上预览未支持")])]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_c("p", [_vm._v("[x] 第一项")])]),
        _vm._v(" "),
        _c("li", [_c("p", [_vm._v("[ ] 第二项")])]),
        _vm._v(" "),
        _c("li", [_c("p", [_vm._v("[ ] 第三项")])]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "列表嵌套" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#列表嵌套" } },
          [_vm._v("#")]
        ),
        _vm._v(" 列表嵌套"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("1.")]
            ),
            _vm._v(" 第一项：\n    "),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("-")]
            ),
            _vm._v(" 第一项嵌套的第一个元素\n    "),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("-")]
            ),
            _vm._v(" 第一项嵌套的第二个元素\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("2.")]
            ),
            _vm._v(" 第二项：\n    "),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("-")]
            ),
            _vm._v(" 第二项嵌套的第一个元素\n       "),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("-")]
            ),
            _vm._v(" 第三层嵌套\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
        ]),
      ]),
      _c("ol", [
        _c("li", [
          _vm._v("第一项\n"),
          _c("ul", [
            _c("li", [_vm._v("嵌套1")]),
            _vm._v(" "),
            _c("li", [_vm._v("嵌套2")]),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("第二项\n"),
          _c("ul", [
            _c("li", [
              _vm._v("嵌套1\n"),
              _c("ul", [_c("li", [_vm._v("嵌套2")])]),
            ]),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "七、区块引用" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#七、区块引用" } },
          [_vm._v("#")]
        ),
        _vm._v(" 七、区块引用"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("区块引用是在段落开头使用 "),
        _c("code", [_vm._v(">")]),
        _vm._v("符号 ，然后后面紧跟一个"),
        _c("strong", [_vm._v("空格")]),
        _vm._v("符号："),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c(
              "span",
              { pre: true, attrs: { class: "token blockquote punctuation" } },
              [_vm._v(">")]
            ),
            _vm._v(" 区块引用\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
        ]),
      ]),
      _c("blockquote", [
        _c("p", [_vm._v("区块引用")]),
        _vm._v(" "),
        _c("p", [_vm._v("Typora中回车键自动延伸区块")]),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "区块嵌套" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#区块嵌套" } },
          [_vm._v("#")]
        ),
        _vm._v(" 区块嵌套"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c(
              "span",
              { pre: true, attrs: { class: "token blockquote punctuation" } },
              [_vm._v(">")]
            ),
            _vm._v(" 第一层\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token blockquote punctuation" } },
              [_vm._v("> >")]
            ),
            _vm._v(" 第二层\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token blockquote punctuation" } },
              [_vm._v("> > >")]
            ),
            _vm._v(" 第三层\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
        ]),
      ]),
      _c("blockquote", [
        _c("p", [_vm._v("第一层")]),
        _vm._v(" "),
        _c("blockquote", [
          _c("p", [_vm._v("第二层")]),
          _vm._v(" "),
          _c("blockquote", [_c("p", [_vm._v("第三层")])]),
        ]),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "区块中使用列表" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#区块中使用列表" } },
          [_vm._v("#")]
        ),
        _vm._v(" 区块中使用列表"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c(
              "span",
              { pre: true, attrs: { class: "token blockquote punctuation" } },
              [_vm._v(">")]
            ),
            _vm._v(" 区块中使用列表\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token blockquote punctuation" } },
              [_vm._v(">")]
            ),
            _vm._v(" "),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("1.")]
            ),
            _vm._v(" 第一项\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token blockquote punctuation" } },
              [_vm._v(">")]
            ),
            _vm._v(" "),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("2.")]
            ),
            _vm._v(" 第二项\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token blockquote punctuation" } },
              [_vm._v(">")]
            ),
            _vm._v(" "),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("*")]
            ),
            _vm._v(" 111\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token blockquote punctuation" } },
              [_vm._v(">")]
            ),
            _vm._v(" "),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("*")]
            ),
            _vm._v(" 222\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
        ]),
      ]),
      _c("blockquote", [
        _c("p", [_vm._v("区块中使用列表")]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [_vm._v("第一项")]),
          _vm._v(" "),
          _c("li", [
            _vm._v("第二项\n"),
            _c("ul", [
              _c("li", [_vm._v("111")]),
              _vm._v(" "),
              _c("li", [_vm._v("222")]),
            ]),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "列表中使用区块" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#列表中使用区块" } },
          [_vm._v("#")]
        ),
        _vm._v(" 列表中使用区块"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("*")]
            ),
            _vm._v(" 第一项\n    > 区块\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("*")]
            ),
            _vm._v(" 第二项\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
        ]),
      ]),
      _c("ul", [
        _c("li", [
          _c("p", [_vm._v("第一项")]),
          _vm._v(" "),
          _c("blockquote", [
            _c("p", [_vm._v("区块")]),
            _vm._v(" "),
            _c("p", [_vm._v("区块")]),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [_c("p", [_vm._v("第二项")])]),
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "八、代码" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#八、代码" } },
          [_vm._v("#")]
        ),
        _vm._v(" 八、代码"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("如果是段落上的一个代码片段可以用反引号把它包起来（"),
        _c("strong", [_vm._v("`")]),
        _vm._v("），示例："),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c(
              "span",
              {
                pre: true,
                attrs: { class: "token code-snippet code keyword" },
              },
              [_vm._v("`alert()`")]
            ),
            _vm._v(" \n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
        ]),
      ]),
      _c("p", [_c("code", [_vm._v("alert()")])]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "代码区块" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#代码区块" } },
          [_vm._v("#")]
        ),
        _vm._v(" 代码区块"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("用三个反引号 "),
        _c("strong", [_vm._v("```")]),
        _vm._v(
          " 包裹一段代码，并指定一种语言（也可以不指定），指定代码语言后会有代码的颜色高亮"
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("本代码区块为示例说明：")]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _vm._v(
              "​```javascript\nfunction test() {\n\talert('test')\n}\n​```\n"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
        ]),
      ]),
      _c("p", [_vm._v("效果：")]),
      _vm._v(" "),
      _c("div", { staticClass: "language-javascript line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-javascript" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function"),
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("test"),
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("("),
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")"),
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{"),
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("alert"),
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("("),
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v("'test'"),
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")"),
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}"),
            ]),
            _vm._v("\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
        ]),
      ]),
      _c("h2", { attrs: { id: "九、链接" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#九、链接" } },
          [_vm._v("#")]
        ),
        _vm._v(" 九、链接"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("格式：")]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token url" } }, [
              _vm._v("["),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("链接名称"),
              ]),
              _vm._v("]("),
              _c("span", { pre: true, attrs: { class: "token url" } }, [
                _vm._v("链接地址"),
              ]),
              _vm._v(")"),
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token url" } }, [
              _vm._v("["),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("链接名称"),
              ]),
              _vm._v("]("),
              _c("span", { pre: true, attrs: { class: "token url" } }, [
                _vm._v("链接地址,可选的alt"),
              ]),
              _vm._v(")"),
            ]),
            _vm._v("\n\n或\n\n"),
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("<")]
                ),
                _vm._v("链接地址"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("7")]),
          _c("br"),
        ]),
      ]),
      _c("p", [_vm._v("示例：")]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token url" } }, [
              _vm._v("["),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("百度"),
              ]),
              _vm._v("]("),
              _c("span", { pre: true, attrs: { class: "token url" } }, [
                _vm._v("http://www.baidu.com,'百度'"),
              ]),
              _vm._v(")"),
            ]),
            _vm._v("\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
        ]),
      ]),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href: "http://www.baidu.com,'%E7%99%BE%E5%BA%A6'",
              target: "_blank",
              rel: "noopener noreferrer",
            },
          },
          [_vm._v("百度"), _c("OutboundLink")],
          1
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("直接显示链接地址：")]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [_vm._v("<http://www.baidu.com>\n")]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
        ]),
      ]),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href: "http://www.baidu.com",
              target: "_blank",
              rel: "noopener noreferrer",
            },
          },
          [_vm._v("http://www.baidu.com"), _c("OutboundLink")],
          1
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "变量链接" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#变量链接" } },
          [_vm._v("#")]
        ),
        _vm._v(" 变量链接"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("链接可以用变量来代替，文档末尾或其他位置附带变量地址："),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _vm._v("这个链接用 1 作为网址变量 "),
            _c("span", { pre: true, attrs: { class: "token url" } }, [
              _vm._v("["),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("Google"),
              ]),
              _vm._v("]["),
              _c("span", { pre: true, attrs: { class: "token variable" } }, [
                _vm._v("1"),
              ]),
              _vm._v("]"),
            ]),
            _vm._v("\n这个链接用 baidu 作为网址变量 "),
            _c("span", { pre: true, attrs: { class: "token url" } }, [
              _vm._v("["),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("Baidu"),
              ]),
              _vm._v("]["),
              _c("span", { pre: true, attrs: { class: "token variable" } }, [
                _vm._v("baidu"),
              ]),
              _vm._v("]"),
            ]),
            _vm._v("\n\n然后在文档的结尾或其他位置给变量赋值（网址）\n  "),
            _c(
              "span",
              { pre: true, attrs: { class: "token url-reference url" } },
              [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("[")]
                ),
                _c("span", { pre: true, attrs: { class: "token variable" } }, [
                  _vm._v("1"),
                ]),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("]")]
                ),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v(":")]
                ),
                _vm._v(" http://www.google.com/"),
              ]
            ),
            _vm._v("\n  "),
            _c(
              "span",
              { pre: true, attrs: { class: "token url-reference url" } },
              [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("[")]
                ),
                _c("span", { pre: true, attrs: { class: "token variable" } }, [
                  _vm._v("baidu"),
                ]),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("]")]
                ),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v(":")]
                ),
                _vm._v(" http://www.baidu.com/"),
              ]
            ),
            _vm._v("\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
        ]),
      ]),
      _c("p", [
        _vm._v("这个链接用 1 作为网址变量 "),
        _c(
          "a",
          {
            attrs: {
              href: "http://www.google.com",
              target: "_blank",
              rel: "noopener noreferrer",
            },
          },
          [_vm._v("Google"), _c("OutboundLink")],
          1
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("这个链接用 baidu 作为网址变量 "),
        _c(
          "a",
          {
            attrs: {
              href: "http://www.baidu.com/",
              target: "_blank",
              rel: "noopener noreferrer",
            },
          },
          [_vm._v("Baidu"), _c("OutboundLink")],
          1
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "github仓库中使用内部链接" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#github仓库中使用内部链接" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Github仓库中使用内部链接"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _vm._v("可使用相对路径（前提是有该路径下的文件）\n"),
            _c("span", { pre: true, attrs: { class: "token url" } }, [
              _vm._v("["),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("test"),
              ]),
              _vm._v("]("),
              _c("span", { pre: true, attrs: { class: "token url" } }, [
                _vm._v("test.md"),
              ]),
              _vm._v(")"),
            ]),
            _vm._v("\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
        ]),
      ]),
      _c(
        "p",
        [
          _c(
            "RouterLink",
            { attrs: { to: "/03.技术/01.技术文档/md-img/test.html" } },
            [_vm._v("test")]
          ),
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "锚点链接" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#锚点链接" } },
          [_vm._v("#")]
        ),
        _vm._v(" 锚点链接"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("本文件中每一个标题都是一个锚点，和HTML的锚点（"),
        _c("code", [_vm._v("#")]),
        _vm._v("）类似"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token url" } }, [
              _vm._v("["),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("Markdown"),
              ]),
              _vm._v("]("),
              _c("span", { pre: true, attrs: { class: "token url" } }, [
                _vm._v("#Markdown"),
              ]),
              _vm._v(")"),
            ]),
            _vm._v("\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
        ]),
      ]),
      _c("blockquote", [
        _c("p", [
          _vm._v(
            "注： github对含有标点符号的标题进行锚点时会忽略掉标点符号，\n本页中，如果这样写则无法跳转：[链接](#九、链接)\n正确写法：[链接](#九链接)"
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("a", { attrs: { href: "#%E4%B8%80Markdown" } }, [
          _vm._v("Markdown"),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("a", { attrs: { href: "#%E4%B9%9D%E9%93%BE%E6%8E%A5" } }, [
          _vm._v("链接"),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("a", { attrs: { href: "#%E6%B5%81%E7%A8%8B%E5%9B%BE" } }, [
          _vm._v("流程图"),
        ]),
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "十、图片" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#十、图片" } },
          [_vm._v("#")]
        ),
        _vm._v(" 十、图片"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("和链接的区别是前面多一个感叹号"),
        _c("code", [_vm._v("!")]),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token url" } }, [
              _c("span", { pre: true, attrs: { class: "token operator" } }, [
                _vm._v("!"),
              ]),
              _vm._v("["),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("图片名"),
              ]),
              _vm._v("]("),
              _c("span", { pre: true, attrs: { class: "token url" } }, [
                _vm._v("图片链接"),
              ]),
              _vm._v(")"),
            ]),
            _vm._v("\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
        ]),
      ]),
      _c("p", [_vm._v("当然，你也可以像链接那样对图片地址使用变量:")]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _vm._v(
              "这里链接用 img 作为图片地址变量 \n然后在文档的结尾或其他位置给变量赋值（图片地址）\n"
            ),
            _c("span", { pre: true, attrs: { class: "token url" } }, [
              _c("span", { pre: true, attrs: { class: "token operator" } }, [
                _vm._v("!"),
              ]),
              _vm._v("["),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("RUNOOB"),
              ]),
              _vm._v("]["),
              _c("span", { pre: true, attrs: { class: "token variable" } }, [
                _vm._v("img"),
              ]),
              _vm._v("]"),
            ]),
            _vm._v("\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token url-reference url" } },
              [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("[")]
                ),
                _c("span", { pre: true, attrs: { class: "token variable" } }, [
                  _vm._v("img"),
                ]),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("]")]
                ),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v(":")]
                ),
                _vm._v(
                  " https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png"
                ),
              ]
            ),
            _vm._v("\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
        ]),
      ]),
      _c("p", [
        _c("img", {
          attrs: {
            src: "https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png",
            alt: "RUNOOB",
          },
        }),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "图片宽高" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#图片宽高" } },
          [_vm._v("#")]
        ),
        _vm._v(" 图片宽高"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("如下想设置图片宽高，可以使用 "),
        _c("code", [_vm._v("<img>")]),
        _vm._v(" 标签。"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-html line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-html" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("<")]
                ),
                _vm._v("img"),
              ]),
              _vm._v(" "),
              _c("span", { pre: true, attrs: { class: "token attr-name" } }, [
                _vm._v("src"),
              ]),
              _c("span", { pre: true, attrs: { class: "token attr-value" } }, [
                _c(
                  "span",
                  {
                    pre: true,
                    attrs: { class: "token punctuation attr-equals" },
                  },
                  [_vm._v("=")]
                ),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v('"')]
                ),
                _vm._v(
                  "https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png"
                ),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v('"')]
                ),
              ]),
              _vm._v(" "),
              _c("span", { pre: true, attrs: { class: "token attr-name" } }, [
                _vm._v("width"),
              ]),
              _c("span", { pre: true, attrs: { class: "token attr-value" } }, [
                _c(
                  "span",
                  {
                    pre: true,
                    attrs: { class: "token punctuation attr-equals" },
                  },
                  [_vm._v("=")]
                ),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v('"')]
                ),
                _vm._v("50px"),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v('"')]
                ),
              ]),
              _vm._v(" "),
              _c("span", { pre: true, attrs: { class: "token attr-name" } }, [
                _vm._v("height"),
              ]),
              _c("span", { pre: true, attrs: { class: "token attr-value" } }, [
                _c(
                  "span",
                  {
                    pre: true,
                    attrs: { class: "token punctuation attr-equals" },
                  },
                  [_vm._v("=")]
                ),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v('"')]
                ),
                _vm._v("30px"),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v('"')]
                ),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
        ]),
      ]),
      _c("img", {
        attrs: {
          src: "https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png",
          width: "50px",
          height: "30px",
        },
      }),
      _vm._v(" "),
      _c("h3", { attrs: { id: "相对路径以及github中使用图片" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#相对路径以及github中使用图片" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 相对路径以及Github中使用图片"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("不管是在本地还是在github同一个仓库中，如果图片存在，可以使用"),
        _c("strong", [_vm._v("相对路径")]),
        _vm._v("。"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("相对路径图片：")]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token url" } }, [
              _c("span", { pre: true, attrs: { class: "token operator" } }, [
                _vm._v("!"),
              ]),
              _vm._v("["),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("头像图片"),
              ]),
              _vm._v("]("),
              _c("span", { pre: true, attrs: { class: "token url" } }, [
                _vm._v("./md-img/test.jpg"),
              ]),
              _vm._v(")"),
            ]),
            _vm._v("\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
        ]),
      ]),
      _c("p", [
        _vm._v("github上如果引用其他github仓库中的图片则要注意地址格式："),
        _c("code", [_vm._v("仓库地址/raw/分支名/图片路径")]),
        _vm._v(" 或 "),
        _c("code", [
          _vm._v(
            "https://raw.githubusercontent.com/用户名/仓库名/分支名/图片路径"
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token url" } }, [
              _c("span", { pre: true, attrs: { class: "token operator" } }, [
                _vm._v("!"),
              ]),
              _vm._v("["),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("其他仓库的图片1"),
              ]),
              _vm._v("]("),
              _c("span", { pre: true, attrs: { class: "token url" } }, [
                _vm._v(
                  "https://github.com/xugaoyi/vue-music/raw/master/src/common/image/default.png"
                ),
              ]),
              _vm._v(")"),
            ]),
            _vm._v("\n或\n"),
            _c("span", { pre: true, attrs: { class: "token url" } }, [
              _c("span", { pre: true, attrs: { class: "token operator" } }, [
                _vm._v("!"),
              ]),
              _vm._v("["),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("其他仓库的图片2"),
              ]),
              _vm._v("]("),
              _c("span", { pre: true, attrs: { class: "token url" } }, [
                _vm._v(
                  "https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png"
                ),
              ]),
              _vm._v(")"),
            ]),
            _vm._v("\n\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
        ]),
      ]),
      _c("p", [
        _c("img", {
          attrs: {
            src: "https://github.com/xugaoyi/vue-music/raw/master/src/common/image/default.png",
            alt: "其他仓库的图片",
          },
        }),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("img", {
          attrs: {
            src: "https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png",
            alt: "其他仓库的图片2",
          },
        }),
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "十一、表格" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#十一、表格" } },
          [_vm._v("#")]
        ),
        _vm._v(" 十一、表格"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("制作表格使用 "),
        _c("code", [_vm._v("|")]),
        _vm._v("来分隔不同的单元格，使用"),
        _c("code", [_vm._v("-")]),
        _vm._v("来分隔表头和其他行。"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token table" } }, [
              _c(
                "span",
                { pre: true, attrs: { class: "token table-header-row" } },
                [
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _c(
                    "span",
                    {
                      pre: true,
                      attrs: { class: "token table-header important" },
                    },
                    [_vm._v("  表头   ")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _c(
                    "span",
                    {
                      pre: true,
                      attrs: { class: "token table-header important" },
                    },
                    [_vm._v(" 表头  ")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _vm._v("\n"),
                ]
              ),
              _c("span", { pre: true, attrs: { class: "token table-line" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("|")]
                ),
                _vm._v("  "),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("----")]
                ),
                _vm._v("  "),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("|")]
                ),
                _vm._v(" "),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("----")]
                ),
                _vm._v("  "),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("|")]
                ),
                _vm._v("\n"),
              ]),
              _c(
                "span",
                { pre: true, attrs: { class: "token table-data-rows" } },
                [
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token table-data" } },
                    [_vm._v(" 单元格  ")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token table-data" } },
                    [_vm._v(" 单元格 ")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token table-data" } },
                    [_vm._v(" 单元格  ")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token table-data" } },
                    [_vm._v(" 单元格 ")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _vm._v("\n"),
                ]
              ),
            ]),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
        ]),
      ]),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("表头"),
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("表头"),
            ]),
          ]),
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("单元格"),
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("单元格"),
            ]),
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("单元格"),
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("单元格"),
            ]),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("对齐方式")])]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("strong", [_vm._v("-:")]),
          _vm._v(" 设置内容和标题栏居右对齐"),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("strong", [_vm._v(":-")]),
          _vm._v(" 设置内容和标题栏居左对齐"),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("strong", [_vm._v(":-:")]),
          _vm._v(" 设置内容和标题栏居中对齐"),
        ]),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token table" } }, [
              _c(
                "span",
                { pre: true, attrs: { class: "token table-header-row" } },
                [
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _c(
                    "span",
                    {
                      pre: true,
                      attrs: { class: "token table-header important" },
                    },
                    [_vm._v(" 左对齐 ")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _c(
                    "span",
                    {
                      pre: true,
                      attrs: { class: "token table-header important" },
                    },
                    [_vm._v(" 右对齐 ")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _c(
                    "span",
                    {
                      pre: true,
                      attrs: { class: "token table-header important" },
                    },
                    [_vm._v(" 居中对齐 ")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _vm._v("\n"),
                ]
              ),
              _c("span", { pre: true, attrs: { class: "token table-line" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("|")]
                ),
                _vm._v(" "),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v(":-----")]
                ),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("|")]
                ),
                _vm._v(" "),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("----:")]
                ),
                _vm._v(" "),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("|")]
                ),
                _vm._v(" "),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v(":----:")]
                ),
                _vm._v(" "),
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("|")]
                ),
                _vm._v("\n"),
              ]),
              _c(
                "span",
                { pre: true, attrs: { class: "token table-data-rows" } },
                [
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token table-data" } },
                    [_vm._v(" 单元格 ")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token table-data" } },
                    [_vm._v(" 单元格 ")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token table-data" } },
                    [_vm._v(" 单元格 ")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _vm._v("\n"),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token table-data" } },
                    [_vm._v(" 单元格 ")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token table-data" } },
                    [_vm._v(" 单元格 ")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token table-data" } },
                    [_vm._v(" 单元格 ")]
                  ),
                  _c(
                    "span",
                    { pre: true, attrs: { class: "token punctuation" } },
                    [_vm._v("|")]
                  ),
                  _vm._v("\n"),
                ]
              ),
            ]),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
        ]),
      ]),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("左对齐"),
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "right" } }, [
              _vm._v("右对齐"),
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("居中对齐"),
            ]),
          ]),
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("单元格"),
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "right" } }, [
              _vm._v("单元格"),
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("单元格"),
            ]),
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("单元格"),
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "right" } }, [
              _vm._v("单元格"),
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("单元格"),
            ]),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "十二、emoji表情包" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#十二、emoji表情包" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 十二、Emoji表情包"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Emoji表情英文名的前后加冒号，Typore上先输入冒号再输入首字母有表情提示"
        ),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [_vm._v(":smirk:\n")]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
        ]),
      ]),
      _c("p", [_vm._v("💋\n😸🙈🐴\n😏😊😃😄 ☀️")]),
      _vm._v(" "),
      _c("p", [
        _vm._v("更多表情名称请查看："),
        _c(
          "a",
          {
            attrs: {
              href: "https://www.webfx.com/tools/emoji-cheat-sheet/",
              target: "_blank",
              rel: "noopener noreferrer",
            },
          },
          [_vm._v("表情包清单"), _c("OutboundLink")],
          1
        ),
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "十三、其他技巧" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#十三、其他技巧" } },
          [_vm._v("#")]
        ),
        _vm._v(" 十三、其他技巧"),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "支持的-html-元素" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#支持的-html-元素" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" 支持的 HTML 元素"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "不在 Markdown 语法涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("目前支持的 HTML 元素有："),
        _c("code", [_vm._v("<kbd> <b> <i> <em> <sup> <sub> <br>")]),
        _vm._v("等等 ，如："),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _vm._v("使用 "),
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("<")]
                ),
                _vm._v("kbd"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("Ctrl"),
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("</")]
                ),
                _vm._v("kbd"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("+"),
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("<")]
                ),
                _vm._v("kbd"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("Alt"),
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("</")]
                ),
                _vm._v("kbd"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("+"),
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("<")]
                ),
                _vm._v("kbd"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v("Del"),
            _c("span", { pre: true, attrs: { class: "token tag" } }, [
              _c("span", { pre: true, attrs: { class: "token tag" } }, [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("</")]
                ),
                _vm._v("kbd"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">"),
              ]),
            ]),
            _vm._v(" 重启电脑\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
        ]),
      ]),
      _c("p", [
        _vm._v("使用 "),
        _c("kbd", [_vm._v("Ctrl")]),
        _vm._v("+"),
        _c("kbd", [_vm._v("Alt")]),
        _vm._v("+"),
        _c("kbd", [_vm._v("Del")]),
        _vm._v(" 重启电脑"),
      ]),
      _vm._v(" "),
      _c("p", [_c("b", [_vm._v("我是使用b标签的加粗字体")])]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "转义" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#转义" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" 转义"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用反斜杠转义字符："
        ),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token bold" } }, [
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v("**"),
              ]),
              _c("span", { pre: true, attrs: { class: "token content" } }, [
                _vm._v("未转义星号显示加粗"),
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v("**"),
              ]),
            ]),
            _vm._v(" \n\\*\\* 转义显示星号 \\*\\*\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
        ]),
      ]),
      _c("p", [
        _c("strong", [_vm._v("未转义星号显示加粗")]),
        _vm._v("\n** 转义显示星号 **"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号："),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _vm._v("\\   反斜线\n`   反引号\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("*")]
            ),
            _vm._v("   星号\n_   下划线\n{}  花括号\n[]  方括号\n()  小括号\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token title important" } },
              [
                _c(
                  "span",
                  { pre: true, attrs: { class: "token punctuation" } },
                  [_vm._v("#")]
                ),
                _vm._v("   井字号"),
              ]
            ),
            _vm._v("\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("+")]
            ),
            _vm._v("   加号\n"),
            _c(
              "span",
              { pre: true, attrs: { class: "token list punctuation" } },
              [_vm._v("-")]
            ),
            _vm._v("   减号\n.   英文句点\n!   感叹号\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("7")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("8")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("9")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("10")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("11")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("12")]),
          _c("br"),
        ]),
      ]),
      _c("hr"),
      _vm._v(" "),
      _c("p", [
        _vm._v("*** "),
        _c("strong", [_vm._v("以下部分在Github或其他在线预览中暂未支持")]),
        _vm._v(" ***"),
      ]),
      _vm._v(" "),
      _c("hr"),
      _vm._v(" "),
      _c("h3", { attrs: { id: "数学公式" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#数学公式" } },
          [_vm._v("#")]
        ),
        _vm._v(" 数学公式"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如："
        ),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _vm._v(
              "$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n$$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("7")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("8")]),
          _c("br"),
        ]),
      ]),
      _c("p", [
        _vm._v(
          "$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}\n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\n\\end{vmatrix}\n$$"
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "图表" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#图表" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" 图表"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _vm._v(
              "​```chart\n,Budget,Income,Expenses,Debt\nJune,5000,8000,4000,6000\nJuly,3000,1000,4000,3000\nAug,5000,7000,6000,3000\nSep,7000,2000,3000,1000\nOct,6000,5000,4000,2000\nNov,4000,3000,5000,\n\ntype: pie\ntitle: Monthly Revenue\nx.title: Amount\ny.title: Month\ny.suffix: $\n​```\n​```mermaid\nsequenceDiagram\nA->>B: 是否已收到消息？\nB-->>A: 已收到消息\n​```\n"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("7")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("8")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("9")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("10")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("11")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("12")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("13")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("14")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("15")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("16")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("17")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("18")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("19")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("20")]),
          _c("br"),
        ]),
      ]),
      _c("blockquote", [_c("p", [_vm._v("注：在Typora中未支持")])]),
      _vm._v(" "),
      _c("div", { staticClass: "language-chart line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v(
              ",Budget,Income,Expenses,Debt\nJune,5000,8000,4000,6000\nJuly,3000,1000,4000,3000\nAug,5000,7000,6000,3000\nSep,7000,2000,3000,1000\nOct,6000,5000,4000,2000\nNov,4000,3000,5000,\n\ntype: pie\ntitle: Monthly Revenue\nx.title: Amount\ny.title: Month\ny.suffix: $\n"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("7")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("8")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("9")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("10")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("11")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("12")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("13")]),
          _c("br"),
        ]),
      ]),
      _c("h3", { attrs: { id: "流程图" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#流程图" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" 流程图"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _vm._v(
              "语法：\n​```mermaid\ngraph TD\nA[模块A] -->|A1| B(模块B)\nB --> C{判断条件C}\nC -->|条件C1| D[模块D]\nC -->|条件C2| E[模块E]\nC -->|条件C3| F[模块F]\n​```\n"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("7")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("8")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("9")]),
          _c("br"),
        ]),
      ]),
      _c("p", [_vm._v("流程图相关文章：")]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href: "https://www.jianshu.com/p/b421cc723da5",
              target: "_blank",
              rel: "noopener noreferrer",
            },
          },
          [
            _vm._v("https://www.jianshu.com/p/b421cc723da5"),
            _c("OutboundLink"),
          ],
          1
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href: "http://www.imooc.com/article/292708",
              target: "_blank",
              rel: "noopener noreferrer",
            },
          },
          [_vm._v("http://www.imooc.com/article/292708"), _c("OutboundLink")],
          1
        ),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-mermaid line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-mermaid" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("graph"),
            ]),
            _vm._v(" TD\nA"),
            _c("span", { pre: true, attrs: { class: "token text string" } }, [
              _vm._v("[模块A]"),
            ]),
            _vm._v(" "),
            _c(
              "span",
              { pre: true, attrs: { class: "token arrow operator" } },
              [_vm._v("-->")]
            ),
            _c(
              "span",
              { pre: true, attrs: { class: "token label property" } },
              [_vm._v("|A1|")]
            ),
            _vm._v(" B"),
            _c("span", { pre: true, attrs: { class: "token text string" } }, [
              _vm._v("(模块B)"),
            ]),
            _vm._v("\nB "),
            _c(
              "span",
              { pre: true, attrs: { class: "token arrow operator" } },
              [_vm._v("-->")]
            ),
            _vm._v(" C"),
            _c("span", { pre: true, attrs: { class: "token text string" } }, [
              _vm._v("{判断条件C}"),
            ]),
            _vm._v("\nC "),
            _c(
              "span",
              { pre: true, attrs: { class: "token arrow operator" } },
              [_vm._v("-->")]
            ),
            _c(
              "span",
              { pre: true, attrs: { class: "token label property" } },
              [_vm._v("|条件C1|")]
            ),
            _vm._v(" D"),
            _c("span", { pre: true, attrs: { class: "token text string" } }, [
              _vm._v("[模块D]"),
            ]),
            _vm._v("\nC "),
            _c(
              "span",
              { pre: true, attrs: { class: "token arrow operator" } },
              [_vm._v("-->")]
            ),
            _c(
              "span",
              { pre: true, attrs: { class: "token label property" } },
              [_vm._v("|条件C2|")]
            ),
            _vm._v(" E"),
            _c("span", { pre: true, attrs: { class: "token text string" } }, [
              _vm._v("[模块E]"),
            ]),
            _vm._v("\nC "),
            _c(
              "span",
              { pre: true, attrs: { class: "token arrow operator" } },
              [_vm._v("-->")]
            ),
            _c(
              "span",
              { pre: true, attrs: { class: "token label property" } },
              [_vm._v("|条件C3|")]
            ),
            _vm._v(" F"),
            _c("span", { pre: true, attrs: { class: "token text string" } }, [
              _vm._v("[模块F]"),
            ]),
            _vm._v("\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
        ]),
      ]),
      _c("h3", { attrs: { id: "时序图" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#时序图" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" 时序图"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _vm._v(
              "​```mermaid\nsequenceDiagram\nA->>B: 是否已收到消息？\nB-->>A: 已收到消息\n​```\n"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
        ]),
      ]),
      _c("div", { staticClass: "language-mermaid line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-mermaid" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("sequenceDiagram"),
            ]),
            _vm._v("\nA"),
            _c(
              "span",
              { pre: true, attrs: { class: "token arrow operator" } },
              [_vm._v("->>")]
            ),
            _vm._v("B"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":"),
            ]),
            _vm._v(" 是否已收到消息？\nB"),
            _c(
              "span",
              { pre: true, attrs: { class: "token arrow operator" } },
              [_vm._v("-->>")]
            ),
            _vm._v("A"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":"),
            ]),
            _vm._v(" 已收到消息\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
        ]),
      ]),
      _c("h3", { attrs: { id: "甘特图" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#甘特图" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" 甘特图"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-markdown line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-markdown" } }, [
          _c("code", [
            _vm._v(
              "​```mermaid\ngantt\ntitle 甘特图\ndateFormat  YYYY-MM-DD\nsection 项目A\n任务1           :a1, 2018-06-06, 30d\n任务2     :after a1  , 20d\nsection 项目B\n任务3      :2018-06-12  , 12d\n任务4      : 24d\n​```\n"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("7")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("8")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("9")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("10")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("11")]),
          _c("br"),
        ]),
      ]),
      _c("div", { staticClass: "language-mermaid line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-mermaid" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("gantt"),
            ]),
            _vm._v(
              "\ntitle 甘特图\ndateFormat  YYYY-MM-DD\nsection 项目A\n任务1           "
            ),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":"),
            ]),
            _vm._v("a1, 2018-06-06, 30d\n任务2     "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":"),
            ]),
            _vm._v("after a1  , 20d\nsection 项目B\n任务3      "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":"),
            ]),
            _vm._v("2018-06-12  , 12d\n任务4      "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":"),
            ]),
            _vm._v(" 24d\n"),
          ]),
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("7")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("8")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("9")]),
          _c("br"),
        ]),
      ]),
      _c("p", [
        _vm._v(
          "​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t     \t\t\t\t\t\t\t\t\t"
        ),
        _c(
          "a",
          { attrs: { href: "#markdown%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B" } },
          [_vm._v("回到顶部")]
        ),
      ]),
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}